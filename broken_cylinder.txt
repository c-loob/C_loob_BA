#include "opencv2\highgui\highgui.hpp"
#include "imgproc.hpp"//cvtcolor
#include "opencv2\video.hpp"//optical flow


#include <stdlib.h>
#include <stdio.h>
#include <math.h>
#include <string.h>
#include <iostream>
#include "opencv\cv.h"
#include "opencv2\video\tracking.hpp"


using namespace cv;
using namespace std;

int main() {
	Mat frame, img, gray, prev_gray, err;
	vector<uchar> status;
	
	//goodpointstotrack def-s
	vector<Point2f> corners[2];
	vector<Point2f> points0;
	int maxCorners = 20;
	double qualitylevel = 0.01;
	double minDist = 20.;
	cv::Mat mask;
	int blockSize = 3;
	bool useHarris = false;
	double k = 0.04;

	VideoCapture capture(0);
	if (!capture.isOpened()) return -1;

	
	//optimization:
	TermCriteria termcrit(CV_TERMCRIT_ITER | CV_TERMCRIT_EPS, 20, 0.3); //terminate either after 20 iterations or when convergence metric reaches 0.3

	Size subPixWinSize(10, 10), winSize(21, 21);

	for (;;) {
		capture >> frame;
		if (frame.empty()) continue;
		waitKey(10);
		
		cvtColor(frame, gray, CV_BGR2GRAY);
		cv::equalizeHist(gray, gray);
		gray.convertTo(gray, CV_8UC1);

		goodFeaturesToTrack(gray, corners[0], maxCorners, qualitylevel, minDist, mask, blockSize, useHarris, k);
		points0 = corners[0];

		for (size_t i = 0; i < points0.size(); i++) {
			circle(gray, points0[i], 2, Scalar(255.), -1);
		}

		//cornerSubPix(gray, points[1], subPixWinSize, Size(-1, -1), termcrit);

		//cvCalcOpticalFlowPyrLK(prev_gray, gray, points[0], points[1], status, err);
		//calcOpticalFlowPyrLK(prev_gray, gray, points[0], points[1], status, err, winSize, 3, termcrit);

		imshow("result", gray);
		char c = waitKey(5);
		//retrieve KLT

		//end ret KLT
		if (c == 27) break;
	}
	return 0;

}